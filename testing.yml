name: varsha_pipeline_ar
steps:
  - name: utility_cmds_bash
    type: Bash
    configuration:
      environmentVariables:
        ENV1: value1
        ENV2: value2
      integrations:
        - name: test
      inputResources:
        - name: ar_aql
        - name: ar_buildInfo
        - name: ar_distributionRule
        - name: ar_gitRepo
          trigger: false
        - name: ar_image
        - name: ar_kubeCluster
        - name: ar_releaseBundle
        - name: ar_remoteFile
        - name: ar_vmCluster
        - name: ar_webhook
      runtime:
        type: image
        image:
          auto:
            language: nodejs
            versions:
              - 8.16.0
              - 10.15.3
    execution:
      onExecute:
        - printenv
        - docker images
        - test "$ENV1" == "value1"
        - test "$ENV2" == "value2"
        - echo imageTag=$imageTag
        - >-
          echo "-------------------------------------------- IMAGE RESOURCE
          -------------------------------------------------"
        - add_run_variable imageTag="firstTest"
        - echo imageTag=$imageTag
        - echo imageName=$imageName
        - pushd $res_ar_image_resourcePath
        - echo imageTag=$imageTag
        - echo imageName=$imageName
        - >-
          add_pipeline_variable imageName="shippabledocker/ship_plv2pyt"
          imageTag="tip"
        - echo imageName=$imageName
        - echo imageTag=$imageTag
        - popd
        - echo imageTag=$imageTag
        - echo imageName=$imageName
        - >-
          echo "------------------------------------------- DONE WITH IMAGE
          RESOURCE -----------------------------------------"
        - >-
          echo "-------------------------------------------- GITREPO RESOURCE
          ----------------------------------------------"
        - pushd $res_ar_gitRepo_resourcePath
        - source example.env
        - echo $TEST
        - ls -la
        - save_run_state test.sh my_file
        - read_json packages.json "name"
        - openssl genrsa -out key.pem 1024
        - openssl rsa -in key.pem -text -noout
        - openssl rsa -in key.pem -pubout -out pub.pem
        - openssl rsa -in pub.pem -pubin -text -noout
        - encrypt_string "secretValue" --key pub.pem
        - encrypted=$(encrypt_string "secretValue" --key pub.pem)
        - echo "$encrypted"
        - decrypt_string "$encrypted" --key key.pem
        - encrypt_file --output encrypted.txt crypt.txt --key pub.pem
        - cat encrypted.txt
        - decrypt_file encrypted.txt --output decrypted.txt --key key.pem
        - cat decrypted.txt
        - echo "$STEP_URL"
        - echo "$SAMPLE"
        - echo "$TEST"
        - echo "$res_ar_gitRepo_isPrerelease"
        - replace_envs example.json sample.json
        - echo "$STEP_URL"
        - echo "$TEST"
        - echo "$BRANCH"
        - echo "$res_ar_gitRepo_isPrerelease"
        - echo "$SAMPLE"
        - cache_files echo.sh my_cache
        - popd
        - >-
          echo "------------------------------------------ DONE WITH GITREPO
          RESOURCE
          --------------------------------------------------------------------------------"
        - bump_semver v1.0.1 major
        - bump_semver v0.0.1 patch
        - compare_git --resource ar_gitRepo --commit-range HEAD~1..HEAD echo.sh
        - >-
          update_commit_status ar_gitRepo --status failure --message "updated in
          utility step" --context jfrog_pipelines
        - switch_env nodejs 8.16.0
        - execute_command echo $res_ar_gitRepo_resourcePath
        - printenv
        - docker images
      onComplete:
        - echo "Ah! done"
        - send_notification varsha_slack
  - name: as_bashAql
    type: Bash
    configuration:
      integrations:
        - name: test
      inputResources:
        - name: ar_aql
      inputSteps:
        - name: utility_cmds_bash
    execution:
      onExecute:
        - printenv
      onComplete:
        - echo "Ah! done"
        - send_notification varsha_slack
  - name: as_bashBuildInfo
    type: Bash
    configuration:
      integrations:
        - name: test
      inputResources:
        - name: ar_buildInfo
      inputSteps:
        - name: as_bashAql
    execution:
      onExecute:
        - printenv
      onComplete:
        - send_notification varsha_slack
  - name: as_bashDistributionRule
    type: Bash
    configuration:
      integrations:
        - name: test
      inputResources:
        - name: ar_distributionRule
      inputSteps:
        - name: as_bashBuildInfo
    execution:
      onExecute:
        - printenv
      onComplete:
        - echo "Ah! done"
        - send_notification varsha_slack
  - name: as_bashFileSpec
    type: Bash
    configuration:
      integrations:
        - name: test
      inputResources:
        - name: ar_fileSpec
      inputSteps:
        - name: as_bashDistributionRule
    execution:
      onExecute:
        - printenv
      onComplete:
        - echo "Ah! done"
        - send_notification varsha_slack
  - name: as_bashGitRepo
    type: Bash
    configuration:
      integrations:
        - name: test
      inputResources:
        - name: ar_gitRepo
      inputSteps:
        - name: as_bashDistributionRule
    execution:
      onExecute:
        - printenv
      onComplete:
        - echo "Ah! done"
        - send_notification varsha_slack
  - name: as_bashImage
    type: Bash
    configuration:
      integrations:
        - name: test
      inputResources:
        - name: ar_image
      inputSteps:
        - name: as_bashGitRepo
    execution:
      onExecute:
        - printenv
      onComplete:
        - echo "Ah! done"
        - send_notification varsha_slack
  - name: as_bashKubeCluster
    type: Bash
    configuration:
      integrations:
        - name: test
      inputResources:
        - name: ar_kubeCluster
      inputSteps:
        - name: as_bashImage
    execution:
      onExecute:
        - printenv
      onComplete:
        - echo "Ah! done"
        - send_notification varsha_slack
  - name: as_bashReleaseBundle
    type: Bash
    configuration:
      integrations:
        - name: test
      inputResources:
        - name: ar_releaseBundle
      inputSteps:
        - name: as_bashKubeCluster
    execution:
      onExecute:
        - printenv
      onComplete:
        - echo "Ah! done"
        - send_notification varsha_slack
  - name: as_bashRemoteFile
    type: Bash
    configuration:
      integrations:
        - name: test
      inputResources:
        - name: ar_remoteFile
      inputSteps:
        - name: as_bashReleaseBundle
    execution:
      onExecute:
        - printenv
      onComplete:
        - echo "Ah! done"
        - send_notification varsha_slack
  - name: as_bashVmCluster
    type: Bash
    configuration:
      integrations:
        - name: test
      inputResources:
        - name: ar_vmCluster
      inputSteps:
        - name: as_bashRemoteFile
    execution:
      onExecute:
        - printenv
      onComplete:
        - echo "Ah! done"
        - send_notification varsha_slack
  - name: as_bashWebhook
    type: Bash
    configuration:
      integrations:
        - name: test
      inputResources:
        - name: ar_webhook
      inputSteps:
        - name: as_bashVmCluster
    execution:
      onExecute:
        - printenv
        - send_notification varsha_slack
      onComplete:
        - echo "Ah! done"
        - send_notification varsha_slack
