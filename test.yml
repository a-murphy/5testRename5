resources:
  - name: stateOne
    type: state
    initialVersion:
      sha: master
  - name: stateTwo
    type: state
  - name: stateThree
    type: state
    repoPath: path
    fileLocation: location
    imageName: name
    initialVersion:
      sha: master
  - name: myImage
    type: image
    imageName: drydock/u16pytall
    configuration:
      integrationName: github
    initialVersion:
      imageTag: v7.4.1
  - name: imageTwo
    type: image
    imageName: drydock/u16pytall
    configuration:
      integrationName: github
    initialVersion:
      imageTag: v7.4.1
      test: test2

  - name: gitRepoResource
    type: gitRepo
    repoPath: a-murphy/5testRename5
    configuration:
      integrationName: github
      buildOn:
    #     commit: false
    #     pullRequest: false
         pullRequestClose: false
         release: true
         tagPush: true
    initialVersion:
      sha: master

  - name: gitRepoResource2
    type: gitRepo
    repoPath: a-murphy/5testRename5
    configuration:
      integrationName: github
      buildOn:
         commit: false
         pullRequest: false
         pullRequestClose: false
         release: false
         tagPush: false
      tags:
        only: tag1|tag2
      branches:
        only: master|test
    initialVersion:
      sha: master
      
  - name: nodeRepoResource
    type: gitRepo
    repoPath: a-murphy/basic-node
    configuration:
      integrationName: github
      buildOn:
         commit: true
         pullRequest: true
         pullRequestClose: false
         release: true
         tagPush: true
    initialVersion:
      sha: master

#  - name: fileIntegrationResource
#    type: file
#    fileLocation: location
#    configuration:
#      files:
#        except:      file
#        only:        file       
#      integrationName: fileServerIntegration 
#    initialVersion:
#      fileName: file
#      fileDtTm: test6
#  - name: cluster
#    type: cluster
#    configuration:
#      integrationName: sshKey 
#    initialVersion:
#      targetIPs:
   #     - 1
   #     - test:
   #         test: test
#        - 1.2.3.5
#        - test2
#  - name: sample_java_file_test
#    type: file
#    fileLocation: text.js
#    configuration:
#      integrationName: fileServerIntegration
#    initialVersion:
#      fileName: test4
#  - name: file_test
#    type: file
#    fileLocation: text.js
#    configuration:
#      integrationName: fileServerIntegration
       
pipelines:
  - name: test_pipeline_1
    setup:
   #   environmentVariables:
   #     readOnly:
   #       ENV1: value-pipe-1
    #      ENV2: value-pipe-2
      runtime:            
        type: host
    steps:
      - name: in_trigger_step
        type: bash
  #      configuration:
  #        affinityGroup: test_group 
    #    requires:
    #      resources:
    #        - gitRepoResource
        setup:
          runtime:            
            type: host
            image:
              language: java
              versions: v1.1
            custom: 
              name: drydock/u16javall
              tag:  v7.1.4
          #    options: test
        execution:
          onExecute:
            - bump_semver v1.2.3 minor
            - echo "executing task command 1"
            - echo "executing task command 2"
            - openssl genrsa -out key.pem 1024 
            - openssl rsa -in key.pem -text -noout 
            - openssl rsa -in key.pem -pubout -out pub.pem 
            - openssl rsa -in pub.pem -pubin -text -noout 
            - echo "testing encryption" > testfile.txt
            - encrypt_file --output testencrypted.txt testfile.txt --key pub.pem
            - cat testencrypted.txt
            - decrypt_file testencrypted.txt --output testunencrypted.txt --key key.pem
            - cat testunencrypted.txt
            - encrypt_string "encryptme" --key pub.pem
            - encryptedstring=$(encrypt_string "encryptme" --key pub.pem)
            - echo "$encryptedstring"
            - decrypt_string "$encryptedstring" --key key.pem

      - name: main_step
        type: bash
   #     configuration:
   #       affinityGroup: test_group 
        setup:
          runtime:            
            type: image
            image:
              custom: 
                name: drydock/u16nodall
                tag:  v7.1.4
        requires:
          resources:
            - nodeRepoResource
            - stateOne
            - myImage
          integrations:
            - test
        outputResources:
       #   - stateOne
          - stateTwo
        triggeredBy:
          steps:
            - in_trigger_step
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
            - compare_git --resource nodeRepoResource
            - cd "$(cat $STEP_JSON_PATH | jq -r .'resources.nodeRepoResource.resourcePath')"
            - switch_env nodejs 0.12
            - npm install
            - cd tests
            - ../node_modules/.bin/mocha --recursive "**/*.spec.js" -R mocha-junit-reporter --reporter-options mochaFile=../testresults.xml
            - ../node_modules/.bin/istanbul --include-all-sources cover -root "../routes" ../node_modules/mocha/bin/_mocha -- -R spec-xunit-file --recursive "**/*.spec.js"
            - ../node_modules/.bin/istanbul report cobertura --dir ../coverageReport
            - cd .. && ls
            - save_tests testresults.xml
            - cache_files shippable.yml myYml
            - mkdir -p testing/test
            - echo "testing" > testing/test/text.txt
            - echo "test2" > testing/test/text2.txt
            - cache_files testing/test myDirectory
            - cp shippable.yml shippable2.yml
            - cache_files *.yml myWildcard
            - restore_cache test doesnotexist.txt
            - restore_cache myYml testyml.yml
            - ls
            - restore_cache myDirectory testing2
            - ls
            - ls -R testing2
            - restore_cache myWildcard wildcards
            - add_run_variable testRunVariable="testing" testingAgain=2 testThree=three
            - save_run_state testyml.yml myYml
            - save_run_state *.yml myWildcard
            - echo $STEP_ID > testid.txt
            - restore_resource_state stateOne test oldtestid.txt
            - cat oldtestid.txt || true
            - save_resource_state stateOne testid.txt test
            - save_resource_state stateOne testyml.yml myYml
            - save_resource_state stateTwo *.yml myWildcard
            - ls -R $RUN_DIR
            
        #    - save_tests $(cat $STEP_JSON_PATH | jq -r .'resources.nodeRepoResource.resourcePath') #testresults.xml
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
      - name: other_step
        type: bash
     #   configuration:
     #     affinityGroup: test_group 
        setup:
        #  environmentVariables:
        #    normal:
        #      ENV1: value11
        #      ENV2: value21
        #    encrypted:
        #      SECURE_ENV1: test_value1
        #      SECURE_ENV2: test_value1
          runtime:            
            type: host
        requires:
          resources:
            - stateTwo
      #      - sample_java_file_test
          integrations:
            - github
        triggeredBy:
      #    resources:
      #      - sample_java_file_test
          steps:
            - main_step
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
            - restore_run_state myYml testyml.yml
            - restore_run_state myWildcard testing/test
            - restore_resource_state stateTwo myYml testyml.yml
            - restore_resource_state stateTwo myWildcard testWildcard
            - ls -R
            - ls -R $RUN_DIR
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
