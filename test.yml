resources:
  - name: gitRepoResource
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/5testRename5
      buildOn:
         pullRequestCreate: true
         pullRequestClose: false
         releaseCreate: true
         tagCreate: true
      tags:
        include: include.*
  - name: nodeRepoResource
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/sample_node
      buildOn:
         pullRequestCreate: true
         pullRequestClose: false
         releaseCreate: true
         tagCreate: true
   #   shallowDepth: 100
  - name: nodeRepoResource2
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/basic-node
      buildOn:
         pullRequestCreate: true
         pullRequestClose: false
         releaseCreate: true
         tagCreate: true
   #   shallowDepth: 100
  - name: bbsRepo
    type: GitRepo
    configuration:
      gitProvider: aidan_bbs
      path: ~aidan/test
      buildOn:
         pullRequestCreate: true
         pullRequestClose: false
         releaseCreate: true
         tagCreate: true
    #  shallowDepth: 1
  - name: gitlabRepo
    type: GitRepo
    configuration:
      gitProvider: aidan_gitlab
      path: a-murphy/testRename5
      buildOn:
         pullRequestCreate: true
         pullRequestClose: false
         releaseCreate: true
         tagCreate: true
   #   shallowDepth: 100

pipelines:
  - name: test_pipeline_windows
    configuration:
      nodePool: win-pool-2
    steps:
      - name: in_trigger_step
        type: PowerShell
        configuration:    
          nodePool: win-pool-2
          affinityGroup: groupone
          runtime:            
            type: host
     #     inputResources:
     #       - name: gitRepoResource
     #         trigger: false
        execution:
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
            - echo $env:STEP_WORKSPACE_DIR
            - echo $env:run_dir
            - echo $env:pipeline_WORKSPACE_DIR
            - ls $env:STEP_WORKSPACE_DIR\download
            - ls $env:run_dir
            - ls $env:pipeline_WORKSPACE_DIR
            - echo "testing 1" > $env:STEP_WORKSPACE_DIR\upload\testfile.txt
            - echo "testing 2" > $env:STEP_WORKSPACE_DIR\upload\testfile2.txt
            - mkdir $env:STEP_WORKSPACE_DIR\upload\cache
            - echo "testing 3" > $env:STEP_WORKSPACE_DIR\upload\cache\testfile.txt
            - echo "testing 1" > $env:run_dir\workspace\testfile.txt
            - echo "testing 2" > $env:run_dir\workspace\testfile2.txt
            - echo "testing 1" > $env:pipeline_workspace_dir\testfile.txt
            - echo "testing 4" > $env:pipeline_workspace_dir\testfile2.txt
         #   - write_output myImage "imageTag=$run_number" "sha=test"
         #   - add_run_files *.txt files
            - sleep 10
            - mkdir -p /test
         #   - cd /test && touch textFile.txt && echo "this is to test $step_id" > textFile.txt && cd ../
         #   - add_run_files /test testFolder1
         #   - add_run_files /test/textFile.txt file
            

      - name: main_step
        type: PowerShell
        configuration:
          nodePool: win-pool-2
          environmentVariables:
            versionTag: testTag
            testNumber: 5
            testBoolean: "false"
     #     affinityGroup: groupone
          inputSteps:
            - name: in_trigger_step
          inputResources:
            - name: nodeRepoResource2
          runtime:
            type: host
            #image:
            #  auto:
            #    language: NodeJS
            #    versions:
            #      - 10
            #  custom:
            #    name: test/node
            #    tag: "10"
            #    autoPull: false
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - 'echo "step_node_name: $env:step_node_name"'
            - 'echo "step_node_id: $env:step_node_id"'
            - 'echo "step_node_pool_name: $env:step_node_pool_name"'
            - $test = find_step_configuration_value "testing123"
            #- if [ -z "$test" ]; then echo "empty"; fi
            #- if [ "$test" == "null" ]; then echo "null"; fi
            #- if [ "$test" == "" ]; then echo "empty string"; fi
            - cd "$env:res_nodeRepoResource2_resourcePath"
            - ls
            - npm install
            - cd tests
            - ../node_modules/.bin/mocha --recursive "**/*.spec.js" -R mocha-junit-reporter --reporter-options mochaFile=../testresults.xml
            - ../node_modules/.bin/istanbul --include-all-sources cover -root "../routes" ../node_modules/mocha/bin/_mocha -- -R spec-xunit-file --recursive "**/*.spec.js"
            - ../node_modules/.bin/istanbul report cobertura --dir ../coverageReport
            - cd .. 
            - ls
            - mkdir (Join-Path $env:step_workspace_dir "upload/tests/$env:step_id")
            - cp testresults.xml (Join-Path $env:step_workspace_dir "upload/tests/$env:step_id")
            #- save_tests testresults.xml
            
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"

      - name: bbs_step
        type: PowerShell
        configuration:
          nodePool: win-pool-2
          inputSteps:
            - name: in_trigger_step
          inputResources:
            - name: bbsRepo
          runtime:
            type: host
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - 'echo "step_node_name: $env:step_node_name"'
            - 'echo "step_node_id: $env:step_node_id"'
            - 'echo "step_node_pool_name: $env:step_node_pool_name"'
            - cd "$env:res_bbsRepo_resourcePath"
            - ls
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
      - name: gitlab_step
        type: PowerShell
        configuration:
          nodePool: win-pool-2
          inputSteps:
            - name: in_trigger_step
          inputResources:
            - name: gitlabRepo
          integrations:
            - name: aidan_slack
            - name: aidan_email
          runtime:
            type: host
        execution:
          onStart:
            - echo "Prepping build environment"
            - send_notification aidan_slack
            - send_notification aidan_email -recipients "aidan@shippable.com"
          onExecute:
            - 'echo "step_node_name: $env:step_node_name"'
            - 'echo "step_node_id: $env:step_node_id"'
            - 'echo "step_node_pool_name: $env:step_node_pool_name"'
            - cd "$env:res_gitlabRepo_resourcePath"
            - send_notification aidan_slack
            - ls
          onSuccess:
            - echo "Job well done!"
            - $NOTIFY_COLOR = "#5183a0"
            - send_notification aidan_slack
          onFailure:
            - echo "uh oh, something went wrong"
            - send_notification aidan_slack
          onComplete: #always
            - echo "Cleaning up some stuff"
            - send_notification aidan_slack
          onCancel:
            - echo "Someone cancelled the job"
