resources:
  - name: test_resource_one
    type: PropertyBag
    configuration:
      test: test
  - name: test_resource_two
    type: PropertyBag
    configuration:
      test: test
  
  - name: execTemplatesAQL
    type: FileSpec
    configuration:
      sourceArtifactory: artifactory
      aql: "path:{'$match':\"org/jfrog/test/\"},{name:{'$match':'maven-metadata.xml'}}"
      recursive: false
  - name: gitRepoResource42
    type: GitRepo
    configuration:
 #     interval: "0 0 * * *"
      gitProvider: aidan_github
      path: a-murphy/5testRename5
      branches:
        include: nointegrations
      buildOn:
        pullRequestClose: true
        pullRequestCreate: true
        releaseCreate: true
        tagCreate: true
   #   cancelPendingRunsOn:
   #     newCommit: true
   #     pullRequestUpdate: true
     # tags:
     #   include: include.*
 # - name: bbsRepoResource
 #   type: GitRepo
 #   configuration:
 #     interval: "0 0 * * *"
 #     gitProvider: aidan_bbs
 #     path: ~aidan/test
   # branches:
   #     include: nointegrations
 #     buildOn:
 #       pullRequestClose: true
 #       pullRequestCreate: true
 #       releaseCreate: true
 #       tagCreate: true
 #     cancelPendingRunsOn:
 #       newCommit: true
 #       pullRequestUpdate: true
 #    # tags:
     #   include: include.*
  - name: gitRepoResource
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/5testRename5
      buildOn:
         pullRequestClose: false
         releaseCreate: true
         tagCreate: true
      tags:
        include: include.*
  - name: helmChart2
    type: HelmChart
    configuration:
      sourceArtifactory: artifactory
      repository: repository
      version: version
      chart: chart
  - name: goRepo
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/go_app
      buildOn:
         pullRequestCreate: true
         pullRequestClose: false
         releaseCreate: true
         tagCreate: true
  - name: goRepo2
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/go-service
         
  - name: releaseBundle
    type: ReleaseBundle
    configuration:
      sourceDistribution:   aidan_distribution
      name: release
      version: '1'
      isSigned: false
  - name: releaseBundle2
    type: ReleaseBundle
    configuration:
      sourceDistribution:   aidan_distribution
      name: release
      version: '1'
      isSigned: false
    
  - name: cronTrigger
    type: CronTrigger
    configuration:
      interval: "0 0 * * *"
  - name: cronTrigger2
    type: CronTrigger
    configuration:
      interval: "0 0 * * *"
  - name: fileSpecFile
    type: FileSpec
    configuration:
      sourceArtifactory: artifactory
      pattern: "test/test.txt"
      recursive: true
  #    buildName: name
  #    buildNumber: 10
   #   flat: ${testBoolean}
   #   limit: ${testNumber}
   #   offset: ${testNumber}
  - name: gitRepoResource2
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/5testRename5
      branches:
        include: master$
      buildOn:
         commit: false
         pullRequestCreate: false
         pullRequestClose: false
         releaseCreate: false
         tagCreate: false
  - name: dockerImage
    type: Image
    configuration:
      registry: docker
      imageName: "amurphy/test"
      imageTag: ${versionTag}
      autoPull: true
  - name: dockerImage2
    type: Image
    configuration:
      registry: docker
      imageName: "amurphy/test"
      imageTag: ${versionTag}
  - name: helmChart
    type: HelmChart
    configuration:
      sourceArtifactory: aidan_artifactory
      repository: example-repo-local
      chart: my chart
      version: v1.1.1
  - name: nodeRepoResource4
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/sample_node
      buildOn:
         commit: true
         pullRequestCreate: true
         pullRequestClose: false
         releaseCreate: true
         tagCreate: true
      branches:
        include: master
  - name: nodeRepoResource2
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/basic-node
      buildOn:
         commit: false
  - name: nodeRepoResource3
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/vue-frontend
      buildOn:
         commit: false
  - name: testRepo
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/5testRename5
      buildOn:
         commit: true
         pullRequestCreate: false
         pullRequestClose: false
         releaseCreate: false
         tagCreate: false
      files:
        include: test.*
        exclude: test.exclude
  - name: outputBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactory
      buildName: test
      buildNumber: 1
  - name: outputBuildInfo2
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactory
      buildName: test
      buildNumber: 1
  - name: outputBuildInfo3
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactory
      buildName: test
      buildNumber: 1
 # - name: emptyBuildInfo
 #   type: BuildInfo
 #   configuration:
 #     sourceArtifactory: artifactory
  - name: mavenBuildInfo2
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactory
      buildName: test
      buildNumber: 1
  - name: aql
    type: Aql
    configuration:
      sourceArtifactory: artifactory
      query: "test: query"
      addedProperties:
        propertyOne: 1
        propertyTwo: two
  - name: properties
    type: PropertyBag
    configuration:
      propertyOne: 1

 # - name: examples_repo
 #   type: GitRepo
 #   configuration:
 #     path: ~aidanm/project-examples
 #     gitProvider: aidan_bbs
 #     branches:
 #       include: master

pipelines:
  - name: DoubleTrigger
    steps:
    - name: stepOne
      type: Bash
      configuration:
        priority: 1
        inputResources:
          - name: properties
            trigger: true
          - name: execTemplatesAQL
     #     - name: examples_repo
        chronological: true
      execution:
        onStart:
          - sleep 2
    - name: stepThree
      type: Bash
      configuration:
        inputSteps:
          - name: stepOne
      execution:
        onStart:
          - sleep 2
    - name: stepTwo
      type: Bash
      configuration:
        inputResources:
          - name: properties
            trigger: true
        chronological: true
        inputSteps:
          - name: stepThree
      execution:
        onStart:
          - sleep 2
  - name: DoubleTrigger2
    steps:
    - name: stepOne
      type: Bash
      configuration:
        affinityGroup: DoubleTrigger2
        priority: 1
        inputResources:
          - name: properties
            trigger: true
        chronological: true
      execution:
        onStart:
          - sleep 2
          - add_run_variables test1=$step_id
    - name: stepThree
      type: Bash
      configuration:
        affinityGroup: DoubleTrigger2
        inputSteps:
          - name: stepOne
        outputResources:
          - name: test_resource_two
      execution:
        onStart:
          - sleep 2
          - add_run_variables test3=$step_id
    - name: stepTwo
      type: Bash
      configuration:
        affinityGroup: DoubleTrigger2
        inputResources:
          - name: properties
            trigger: true
        chronological: true
        inputSteps:
          - name: stepThree
        outputResources:
          - name: test_resource_one
      execution:
        onStart:
          - sleep 2
          - add_run_variables test2=$step_id
    - name: stepFour
      type: Bash
      configuration:
        affinityGroup: DoubleTrigger2
        inputResources:
          - name: test_resource_one
          - name: test_resource_two
            trigger: true
      execution:
        onStart:
          - sleep 2
 # - name: MavenStuff
 #   steps:
 #   - name: BuildSample
 #     type: MvnBuild
 #     configuration:
 #       environmentVariables:
 #         JFROG_CLI_BUILD_NAME: Maven
 #         JFROG_CLI_BUILD_NUMBER: $run_number
 #       sourceLocation: artifactory-maven-plugin-example
 #       configFileLocation: .
 #       configFileName: config
 #       mvnCommand: "install"
 #       inputResources:
 #         - name: examples_repo
 #       outputResources:
 #         - name: mavenBuildInfo2
 #       integrations:
 #         - name: artifactory
 #       autoPublishBuildInfo: true
 #     execution:
 #       onStart:
 #         - update-ca-certificates -f
  
  - name: test_pipeline_10
    configuration:
   #   nodePool: Ubuntu16
    #  dependencyMode:
    #    waitOnChildComplete: true
      runtime:            
        type: image
        image:
          auto:
            language: node
            versions:
              - 10.18.0
    steps:
      - name: in_trigger_step
        type: Bash
        configuration:
          affinityGroup: groupone
       #   integrations:
       #     - name: docker
          runtime:            
            type: host
          inputResources:
            - name: gitRepoResource
              trigger: false
          outputResources:
            - name: gitRepoResource2
        execution:
          onExecute:
            - bump_semver v1.2.3 minor
            - echo "executing task command 1"
            - echo "executing task command 2"
            - openssl genrsa -out key.pem 1024 
            - openssl rsa -in key.pem -text -noout 
            - replicate_resource gitRepoResource gitRepoResource2
            - openssl rsa -in key.pem -pubout -out pub.pem 
            - openssl rsa -in pub.pem -pubin -text -noout 
            - echo "testing encryption" > testfile.txt
            - encrypt_file --output testencrypted.txt testfile.txt --key pub.pem
            - cat testencrypted.txt
            - decrypt_file testencrypted.txt --output testunencrypted.txt --key key.pem
            - cat testunencrypted.txt
            - encrypt_string "encryptme" --key pub.pem
            - encryptedstring=$(encrypt_string "encryptme" --key pub.pem)
            - echo "$encryptedstring"
            - decrypt_string "$encryptedstring" --key key.pem
         #   - write_output myImage "imageTag=$run_number" "sha=test"
            - add_run_files *.txt files
            - sleep 10
            - mkdir -p /test
            - cd /test && touch textFile.txt && echo "this is to test $step_id" > textFile.txt && cd ../
            - add_run_files /test testFolder1
            - add_run_files /test/textFile.txt file
            - add_run_variables test_variable="testing 1 2 3" test_variable2='testing 1 $2 3'
            

      - name: main_step
        type: Bash
        configuration:
          environmentVariables:
            versionTag: testTag
            testNumber: 5
            testBoolean: "false"
     #     affinityGroup: groupone
     #     nodePool: Windows
          inputSteps:
            - name: in_trigger_step
          inputResources:
            - name: nodeRepoResource4
              trigger: false
            - name: testRepo
            - name: aql
          outputResources:
            - name: nodeRepoResource2
         # integrations:
         #   - name: jira
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - "10"
       #       custom:
       #         name: drydock/u16node
       #         tag: master
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - 'echo "step_node_name: $step_node_name"'
            - 'echo "step_node_id: $step_node_id"'
            - 'echo "step_node_pool_name: $step_node_pool_name"'
            - replicate_resource nodeRepoResource4 nodeRepoResource2 --match-settings
            - echo $test_variable $test_variable2
            - test=$(find_step_configuration_value "testing123")
            - if [ -z "$test" ]; then echo "empty"; fi
            - if [ "$test" == "null" ]; then echo "null"; fi
            - if [ "$test" == "" ]; then echo "empty string"; fi
        #    - send_notification jira --project-id "TES" --type "Task" --summary "test bug" --description "test bug description" 
            - echo "executing task command 1"
            - echo "executing task command 2"
            - printenv
          #  - restore_pipeline_files testFolder /testRestore
          #  - ls -R /testRestore
          #  - mkdir /test
          #  - cd /test && touch textFile.txt && echo "this is to test $run_number" > textFile.txt && cd ../
          #  - add_pipeline_files /test testFolder
          #  - cp -r /var/opt/jfrog/pipelines /tmp/test
          #  - add_pipeline_files /tmp/test testBigFolder
          #  - add_run_files /test testFolder
          #  - restore_run_files testFolder1 /test1
          #  - ls -R /test1
          #  - add_cache_files /test testFolder
            - compare_git --resource nodeRepoResource4
            - cd "$res_nodeRepoResource4_resourcePath"
          #  - switch_env nodejs 0.12
            - npm install
            - cd tests
            - ../node_modules/.bin/mocha --recursive "**/*.spec.js" -R mocha-junit-reporter --reporter-options mochaFile=../testresults.xml
            - ../node_modules/.bin/istanbul --include-all-sources cover -root "../routes" ../node_modules/mocha/bin/_mocha -- -R spec-xunit-file --recursive "**/*.spec.js"
            - ../node_modules/.bin/istanbul report cobertura --dir ../coverageReport
            - cd .. && ls
         #   - fallocate -l 9M largefile
         #   - save_tests largefile
            - save_tests testresults.xml
            
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
            
   #   - name: powershell_step
   #     type: Powershell
   #     configuration:
      #    nodePool: pool
   #       inputSteps:
   #         - name: in_trigger_step
   #       inputResources:
   #         - name: nodeRepoResource
   #           trigger: false
   #       runtime:
   #         type: image
   #         image:
   #           auto:
   #             language: node
   #             versions:
   #               - 10
   #    #       custom:
   #    #         name: drydock/u16node
   #    #         tag: master
   #     execution:
   #       onStart:
   #         - echo "Prepping build environment"
   #       onExecute:
   #         - 'echo "step_node_name: $step_node_name"'
   #         - 'echo "step_node_id: $step_node_id"'
   #         - 'echo "step_node_pool_name: $step_node_pool_name"'
   #       onSuccess:
   #         - echo "Job well done!"
   #       onFailure:
   #         - echo "uh oh, something went wrong"
   #       onComplete: #always
   #         - echo "Cleaning up some stuff"
   #       onCancel:
   #         - echo "Someone cancelled the job"
      - name: step_3
        type: Bash
        configuration:
          outputResources:
            - name: properties
          affinityGroup: grouptwo
          inputSteps:
            - name: main_step
        execution:
          onExecute:
            - sleep 1
            - write_output properties property=${run_number}
      - name: step_4
        type: Bash
        configuration:
          affinityGroup: grouptwo
          inputSteps:
            - name: main_step
          inputResources:
            - name: helmChart2
        execution:
          onExecute:
            - sleep 10
      - name: step_5
        type: Bash
        configuration:
          affinityGroup: grouptwo
          priority: 10
          inputSteps:
            - name: main_step
          outputResources:
            - name: dockerImage
        execution:
          onExecute:
        #    - sleep 10
            - write_output dockerImage "imageTag=$run_number" "sha=test"
     # - name: step_6
     #   type: Bash
     #   configuration:
     #     affinityGroup: grouptwo
     #     priority: 5
     #     inputResources:
     #       - name: dockerImage
     #   execution:
     #     onExecute:
     #       - sleep 10
      - name: step_7
        type: Bash
        configuration:
          affinityGroup: groupthree
          inputSteps:
            - name: main_step
        execution:
          onExecute:
            - sleep 10
      - name: step_8
        type: Bash
        configuration:
          affinityGroup: groupthree
          runtime:            
            type: image
          inputSteps:
            - name: main_step
        execution:
          onExecute:
            - sleep 10
      - name: step_9
        type: Bash
        configuration:
          affinityGroup: groupfour
          priority: 10
          inputSteps:
            - name: main_step
        execution:
          onExecute:
            - sleep 10
      - name: step_10
        type: Bash
        configuration:
          priority: 5
          inputSteps:
            - name: step_5
        execution:
          onExecute:
            - sleep 10
            
      - name: docker_build
        type: DockerBuild
        configuration:
          dockerFileLocation: .
          dockerFileName: Dockerfile
          dockerImageName: 192.168.50.42:8082/dockerrepo/image #${versionTag}
          dockerImageTag: tag #${versionTag}
      #    dockerOptions: "test${step_name} --test ${testNumber}"
          environmentVariables:
            versionTag: testTag
            testNumber: 5
            testBoolean: "false"
            JFROG_CLI_BUILD_NAME: dockerBuild
          inputSteps:
            - name: main_step
          inputResources:
            - name: fileSpecFile
            - name: gitRepoResource42
          #  - name: nodeRepoResource4
      - name: docker_push
        type: DockerPush
        configuration:
          targetRepository: dockerrepo
          forceXrayScan: ${testBoolean}
          autoPublishBuildInfo: true
          environmentVariables:
            versionTag: testTag
            testNumber: 5
            testBoolean: "false"
          inputSteps:
            - name: docker_build
          outputResources:
            - name: outputBuildInfo
          integrations:
            - name: artifactory
        execution:
          onStart:
            - jfrog rt c show artifactory


  - name: test_pipeline_11
   # configuration:   
   #   chronological: true
   #   dependencyMode:
   #     waitOnParentComplete: true
   #     waitOnChildComplete: "true"
    steps:
      - name: triggered_by_resource
        type: Bash
        configuration:
          inputResources:
            - name: dockerImage
          outputResources:
            - name: dockerImage2
        execution:
          onExecute:
            - sleep 1
      - name: following_step
        type: Bash
        configuration:
          inputResources:
            - name: dockerImage2
        execution:
          onExecute:
            - sleep 1
            
  - name: pipeline_test
    steps:
      - name: test
        type: Bash
        configuration:
          environmentVariables:
            chart: artifactory
            appVersion: ''
            segment: patch
          inputResources:
            - name: gitRepoResource
          runtime:
            type: image
            image:
              custom:
                name: drydock/u16phpall
                tag: master
                autoPull: false
        execution:
          onExecute:
            - php --version

  - name: go_test
    steps:
      - name: Go
        type: GoBuild
        configuration:
          sourceLocation: "."
          repository: repo
          outputLocation: "output"
          outputFile: "file"
          inputResources:
            - name: gitRepoResource
        #    - name: fileSpec
          outputResources:
            - name: outputBuildInfo
          integrations:
            - name: artifactory
          runtime:
            type: image
     #       image:
     #         auto:
     #           language: go
     #           versions:
     #             - 1.11.11
     #   execution:
     #     onExecute:
     #       - echo "test"
      - name: npmBuild
        type: NpmBuild
        configuration:
          sourceLocation: .
          repositoryName: remote-npm
          inputSteps:
            - name: Go
          inputResources:
            - name: nodeRepoResource4
            - name: fileSpecFile
          outputResources:
            - name: outputBuildInfo
     #     integrations:
     #       - name: artifactory

      - name: npmBuild2
        type: NpmBuild
        configuration:
          sourceLocation: .
          repositoryName: remote-npm
          inputSteps:
            - name: Go
          inputResources:
            - name: nodeRepoResource3
          integrations:
            - name: artifactory
      - name: npmPublish2
        type: NpmPublish
        configuration:
          repositoryName: test-npm
          forceXrayScan: true
          autoPublishBuildInfo: true
          integrations:
            - name: artifactory
          inputSteps:
            - name: npmBuild2
          outputResources:
            - name: outputBuildInfo

  - name: go_test3
    steps:
      - name: triggerCancel
        type: Bash
        configuration:
          affinityGroup: GoTest2
          inputResources:
            - name: gitRepoResource42
        execution:
          onExecute:
            - sleep 30
      - name: Go3
        type: GoBuild
        configuration:
          affinityGroup: GoTest2
          sourceLocation: "."
          repository: repo
          outputLocation: "output"
          outputFile: "file"
         # goCommand: "build -insecure -o ${outputLocation}/${outputFile}"
          inputSteps:
            - name: triggerCancel
          inputResources:
            - name: goRepo
            - name: fileSpec
          outputResources:
            - name: outputBuildInfo
          integrations:
            - name: artifactory
          runtime:
            type: image
        execution:
          onStart:
            - "pushd (find_resource_variable $inputGitRepoResourceName resourcePath)"
            - "go get -insecure"
            - popd
     #       image:
     #         auto:
     #           language: go
     #           versions:
     #             - 1.11.11
      - name: npmBuild3
        type: NpmBuild
        configuration:
          affinityGroup: GoTest2
          sourceLocation: .
          repositoryName: test-npm
          inputSteps:
            - name: Go3
          inputResources:
            - name: nodeRepoResource4
       #     - name: fileSpec
          outputResources:
            - name: outputBuildInfo
          integrations:
            - name: artifactory
        execution:
          onStart:
            - sudo apt-get update
            
      - name: goPublishBinary
        type: GoPublishBinary
        configuration:
          affinityGroup: GoTest2
          forceXrayScan: true
          autoPublishBuildInfo: false
          targetRepository: go-test
          integrations:
            - name: artifactory
          outputResources:
            - name: outputBuildInfo
          inputSteps:
            - name: Go3
      - name: goPublishModule
        type: GoPublishModule
        configuration:
          affinityGroup: GoTest2
          forceXrayScan: false
          autoPublishBuildInfo: true
          targetRepository: go-test
          sourceLocation: .
          version: "v0.0.0"
          self: true
          deps: ALL
          outputResources:
            - name: outputBuildInfo
          inputResources:
            - name: goRepo2
      - name: helmPublish
        type: HelmPublish
        configuration:
          affinityGroup: GoTest2
          chartPath: "./my chart"
          flags: --debug
          autoPublishBuildInfo: true
          inputResources:
            - name: gitRepoResource42
          outputResources:
            - name: helmChart
            - name: outputBuildInfo
            
      - name: createReleaseBundle
        type: CreateReleaseBundle
        configuration:
          releaseBundleName:        myReleaseBundle
          releaseBundleVersion:     "${run_number}"
          dryRun:                   false
          sign:                     false
          storeAtSourceArtifactory: "false"
          description:              "my description"
          releaseNotes:                         
            syntax:                markdown
            content:               "my release notes"
          inputResources:
            - name: outputBuildInfo
          inputSteps:
            - name: helmPublish
          outputResources:
            - name: releaseBundle
            - name: helmChart
      - name: signReleaseBundle
        type: SignReleaseBundle
        configuration:
          inputResources:
            - name: releaseBundle
            - name: helmChart
          outputResources:
            - name: releaseBundle2
            - name: fileSpecFile
      - name: publishBuildInfo
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: goPublishBinary
          inputResources:
            - name: outputBuildInfo
            - name: gitRepoResource42
          outputResources:
            - name: outputBuildInfo2
            - name: fileSpecFile
      - name: xrayScan
        type: XrayScan
        configuration:
          inputResources:
            - name: outputBuildInfo2
            - name: gitRepoResource42
          outputResources:
            - name: outputBuildInfo3
            - name: fileSpecFile
 


