resources:
  - name: imageResource3
    type: Image
    configuration:
      registry: docker
      imageName: amurphy/test
      imageTag: master.100
      autoPull: true
      
  - name: imageResource4
    type: Image
    configuration:   
      registry: docker
      imageName: amurphy/test
      imageTag: master.100
      autoPull: true
            
  - name: webhook
    type: Webhook
    configuration:
      webhookName: webhook
      payload: "test"
      
  - name: VmClusterTest
    type: VmCluster
    configuration:
      sshKey: sshKey
      targets:
        - 127.0.0.1
        
  - name: FileSpecTest
    type: FileSpec
    configuration:
      sourceArtifactory: artifactory
      limit: 1
      offset: 1
      
 # - name: bitbucketRepo20
 #   type: GitRepo
 #   configuration:
 #     gitProvider: bitbucketServer
 #     path: ~AIDAN/test
 #     buildOn:
 #        pullRequestCreate: true
 #        pullRequestClose: true
 #        releaseCreate: true
 #        tagCreate: true
   
 # - name: bitbucketRepo12
 #   type: GitRepo
 #   configuration:
 #     gitProvider: bitbucket
 #     path: a-murphy/sample_pipelines
 #     buildOn:
 #        pullRequestCreate: true
 #        pullRequestClose: true
 #        releaseCreate: true
 #        tagCreate: true
        
  - name: gitlabRepo5
    type: GitRepo
    configuration:
      gitProvider: gitlab
      path: a-murphy/testRename5
      buildOn:
         pullRequestCreate: true
         pullRequestClose: true
         releaseCreate: true
         tagCreate: true
         
  - name: gitNodeRepoResource
    type: GitRepo
    configuration:
      gitProvider: github
      path: a-murphy/sample_node

 # - name: gitRepoResource
 #   type: GitRepo
 #   configuration:
 #     gitProvider: github
 #     path: a-murphy/5testRename5
     # branches:
     #   only: test[
 #     buildOn:
     #    commit: false
  #       pullRequestCreate: true
  #       pullRequestClose: false
  #       releaseCreate: true
  #       tagCreate: true
 
      
  - name: imageResource
    type: Image
    configuration:
      registry: docker
      imageName: amurphy/test
      imageTag: master.105
      autoPull: false
  - name: my_releaseBundle2
    type: ReleaseBundle
    configuration:
      sourceDistribution: distribution
      name: amurphy/test
      version: master.105
  - name: my_signed_releaseBundle
    type: ReleaseBundle
    configuration:
      sourceDistribution: distribution
      name: amurphy/test
      version: master.105
  - name: my_DistributionRule
    type: DistributionRule
    configuration:
      sourceDistribution: distribution
      serviceName: service
      cityName: city
      siteName: site
      countryCodes:
       - country1
       - country2
  - name: my_BuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactory
      buildName: myName
      buildNumber: 101
  - name: my_BuildInfo2
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactory
      buildName: myName
      buildNumber: 101
      
      
      
 # - name: my_Aql
 #   type: Aql
 #   configuration:
 #     sourceArtifactory: artifactory
 #     name: amurphy/test
 #     version: master.105
 #     query: test
 # - name: my_Aql2
 #   type: Aql
 #   configuration:
 #     sourceArtifactory: artifactory
 #     name: amurphy/test
 #     version: master.105
 #     query: test
  - name: kubeCluster
    type: KubeCluster
    configuration:
      kubernetesConfig: kubernetes
      
#  - name: bitbucketServerRepoResource
#    type: gitRepo
#    repoPath: ~aidan/test
#    configuration:
#      integrationName: bitbucketServer
#      buildOn:
    #     commit: false
#         pullRequest: true
#         pullRequestClose: false
    #     release: true
#         tagPush: true
#    version:
#      sha: master

#  - name: gitRepoResource2
#    type: GitRepo
#    configuration:
#      gitProvider: github
#      path: a-murphy/5testRename5
#      buildOn:
#         pullRequestCreate: true
#         pullRequestClose: true
#         releaseCreate: true
#         tagCreate: true

  - name: fileIntegrationResource
    type: RemoteFile
    configuration:
      fileLocation: location
      fileName: file   
      source: artifactory 
 
#  - name: cluster
#    type: cluster
#    configuration:
#      integrationName: sshKey 
#    version:
#      targetIPs:
   #     - 1
#        - 1.2.3.5
#        - test2
#  - name: sample_java_file_test
#    type: file
#    fileLocation: text.js
#    configuration:
#      integrationName: fileServerIntegration
#    version:
#      fileName: test4
#  - name: file_test
#    type: file
#    fileLocation: text.js
#    configuration:
#      integrationName: fileServerIntegration
       
pipelines:
  - name: test_pipeline_1
    configuration:
      environmentVariables:   
       readOnly:
          ENV1: value-1
          ENV2: value-2
      runtime:            
        type: image
        image:
          auto:
            language: none
     #     custom: 
     #       name: drydock/u18java
     #       tag:  master
     #       autoPull: false
    steps:
      - name: in_trigger_step
        type: Bash
        configuration:
          priority: 10
          affinityGroup: test_group 
          timeoutSeconds: 180
          integrations:
            - name: docker
            - name: AWS
            - name: realArtifactory
         #   - name: gcloud
            - name: sshKey
        #  environmentVariables:
        #    ENV1: value1
        #    ENV2: value2
          runtime:            
            type: host         
      #      type: image
      #      image:
      #        auto:
      #          language: none
       #       custom: 
       #         name: drydock/u18java
       #         tag:  master
       #         autoPull: false
          #    options: test
        execution:
          onSuccess:
            - echo "test"
          onExecute:
        #    - sleep 10
        #    - bump_semver v1.2.3 minor
            - aws configure set region "us-west-2"
            - aws ecr get-login
            - ssh-keygen -l -f ~/.ssh/sshKey.pub 
            - openssl rsa -check -in ~/.ssh/sshKey -noout
            - jfrog rt s "pipelines_1560551909"
            - echo "executing task command 1"
            - echo "executing task command 2"
      #      - switch_env java openjdk7 || true
      #      - switch_env java openjdk8 || true
      #      - switch_env java openjdk9 || true
      #      - switch_env java openjdk10 || true
      #      - switch_env java openjdk11 || true
      #      - java -version
      #      - switch_env java oraclejdk7 || true
      #      - switch_env java oraclejdk8 || true
      #      - switch_env java oraclejdk9 || true
      #      - switch_env java oraclejdk10 || true
      #      - switch_env java oraclejdk11 || true
      #      - java -version
        #    - openssl genrsa -out key.pem 1024 
        #    - openssl rsa -in key.pem -text -noout 
        #    - openssl rsa -in key.pem -pubout -out pub.pem 
        #    - openssl rsa -in pub.pem -pubin -text -noout 
        #    - echo "testing encryption" > testfile.txt
        #    - encrypt_file --output testencrypted.txt testfile.txt --key pub.pem
        #    - cat testencrypted.txt
        #    - decrypt_file testencrypted.txt --output testunencrypted.txt --key key.pem
        #    - cat testunencrypted.txt
        #    - encrypt_string "encryptme" --key pub.pem
        #    - encryptedstring=$(encrypt_string "encryptme" --key pub.pem)
        #    - echo "$encryptedstring"
        #    - decrypt_string "$encryptedstring" --key key.pem
            - echo $testRunVariable
            - echo $testPipelineVariable
            - echo $testingAgain
            - add_run_variables testRunVariable="testing" testingAgain=2 testThree=three
            - add_pipeline_variables testPipelineVariable="RUN$run_id" testingAgain=three
            - echo $testRunVariable
            - echo $testPipelineVariable
            - echo $testingAgain
         #   - restore_pipeline_state testing testfile2.txt
         #   - save_pipeline_state key.pem key2.pem
            - ls
         #   - save_pipeline_state testfile.txt testing
         #   - save_pipeline_state key.pem key.pem
         #   - mkdir -p testdirectory
         #   - echo "testing" > testdirectory/test1.txt
         #   - echo "testing again" > testdirectory/test2.txt

      - name: main_step
        type: Bash
        configuration:
          chronological: true
       #   affinityGroup: test_group
          environmentVariables:
            ENV3: value3
            ENV4: value4
          runtime:            
            type: image
            image:
              auto:
                language: nodejs
           #   custom: 
           #     name: drydock/u16node
           #     tag:  master
           #     autoPull: false
          inputResources:
            - name: imageResource4
            - name: gitlabRepo5
        #    - name: gitRepoResource
        #    - name: kubeCluster
      #      - bitbucketServerRepoResource
          inputSteps:
            - name: in_trigger_step
          outputResources:
            - name: webhook
       #     - name: gitRepoResource2
       #     - name: imageResource
        #  integrations:
       #     - name: github
       #     - name: AWS
       #     - name: realArtifactory
       #     - name: slack
         #   - name: bitbucket
         #   - name: bitbucketServer
       #     - name: test
       #     - name: docker
       #     - name: gcloud
        #    - name: kubernetes
           # - name: artifactory
        execution:
          onStart:
         #   - printenv
            - echo $CURRENT_SCRIPT_SECTION
         #   - send_notification slack
         #   - sudo apt-get install kubectl
         #   - cat ~/.kube/config
         #   - kubectl get services
        #    - jfrog rt s "pipelines_1560551909"
            - echo $int_test_key1
            - echo $int_test_key2
            - echo $int_test_key3
            - echo $int_test_key4
            - echo "$ENV1 $ENV2 $ENV3 $ENV4"
         #   - update_commit_status bitbucketServerRepoResource --message "$CURRENT_SCRIPT_SECTION" --context "$CURRENT_SCRIPT_SECTION"
            - echo "Prepping build environment"
            - echo "$testPipelineVariable"
        #    - aws configure set region "us-west-2"
        #    - aws ecr get-login
         #   - update_commit_status gitRepoResource --status processing
          onExecute:
            - echo $CURRENT_SCRIPT_SECTION
         #   - replicate_resource gitRepoResource gitRepoResource2 #--match-settings
         #   - write_output imageResource "imageTag=$testPipelineVariable"
         #   - update_commit_status bitbucketServerRepoResource --message "$CURRENT_SCRIPT_SECTION" --context "$CURRENT_SCRIPT_SECTION"
            - echo "executing task command 1"
            - echo "executing task command 2"
          #  - ls -R $STEP_WORKSPACE_DIR/download
          #  - add_cache_files test lastrun.txt
          #  - ls
            - echo "testing1234" > testing.txt
            - add_cache_files testing.txt test
          #  - restore_pipeline_state testing testfile.txt
            - restore_pipeline_files key.pem key.pem
            - ls
         #   - write_output gitRepoResource2 key=value123
         #   - write_output webhook key=value123 key2=value456 key3="testing 123" key4='testing "23' key5=testing\' key6='testing$test'
        #    - update_commit_status gitRepoResource --status processing --message "my message"
        #    - update_commit_status bitbucketServerRepoResource --status failure --context "failing-context"
        #    - update_commit_status bitbucketServerRepoResource --status success --message "my message" --context "succcess-context"
          #  - update_commit_status gitRepoResource --status testing
        #    - update_commit_status gitRepoResource2
        #    - compare_git --resource gitRepoResource
        #    - compare_git --commit-range d4c493389cd54b2ad795f94e91d445fece8cba2f..master --path $STEP_DEPENDENCY_STATE_DIR/resources/gitRepoResource
        #    - write_output gitRepoResource2 key1=value1 key2="value2" key3="value 3" "key4=value4" key5= key6="" key7=value7=7 key8

            - add_run_variables testRunVariable="testing" testingAgain=2 testThree=three
         #   - rm $PIPELINE_WORKSPACE_DIR/**
         #   - ls -al $PIPELINE_WORKSPACE_DIR
          #  - switch_env c --jdk openjdk11 4
          onSuccess:
            - echo "Job well done!"
            - echo $CURRENT_SCRIPT_SECTION
            - "1"
            - echo "test"
         #   - compare_git --resource gitRepoResource
        #    - update_commit_status bitbucketServerRepoResource --message "$CURRENT_SCRIPT_SECTION" --context "$CURRENT_SCRIPT_SECTION"
          onFailure:
            - echo $CURRENT_SCRIPT_SECTION
       #     - update_commit_status bitbucketServerRepoResource --message "$CURRENT_SCRIPT_SECTION" --context "$CURRENT_SCRIPT_SECTION"
            - echo "uh oh, something went wrong"
       #     - update_commit_status bitbucketServerRepoResource --status failure
          onComplete: #always
            - echo $CURRENT_SCRIPT_SECTION
        #    - update_commit_status bitbucketServerRepoResource --message "$CURRENT_SCRIPT_SECTION" --context "$CURRENT_SCRIPT_SECTION"
            - echo "Cleaning up some stuff"
          onCancel:
            - echo $CURRENT_SCRIPT_SECTION
       #     - update_commit_status bitbucketServerRepoResource --message "$CURRENT_SCRIPT_SECTION" --context "$CURRENT_SCRIPT_SECTION"
            - echo "Someone cancelled the job"

        #  - stateOne
      - name: other_step
        type: Bash
        configuration:
          priority: 50
  #        affinityGroup: test_group 
          runtime:            
            type: host
      #    resources:
      #      - stateOne
      #      - sample_java_file_test
          integrations:
            - name: github
      #      - name: slack
          inputSteps:
      #    resources:
      #      - sample_java_file_test
            - name: main_step
        execution:
       #   onStart:
       #     - send_notification slack
      #      - echo "Prepping build environment"
      #      - echo "$testRunVariable"
      #      - echo "$testingAgain"
      #      - echo "$testThree"
          onExecute:
          #  - send_notification slack
            - echo "executing task command 1"
            - echo "executing task command 2"
            - echo "$testRunVariable"
            - echo "$testingAgain"
            - echo "$testThree"
            - add_run_variables testRunVariable="testingAgain"
            - yes "testing 1234 " | head -c 100000 > test.txt
            - echo "testing 1234 " > test2.txt
            - openssl genrsa -out key.pem 2048
            - openssl rsa -in key.pem -text -noout
            - openssl rsa -in key.pem -pubout -out pub.pem 
            - openssl rsa -in pub.pem -pubin -text -noout 
            - encrypt_file --output encrypted.txt test.txt --key pub.pem
        #    - cat encrypted.txt
            - decrypt_file encrypted.txt --output decrypted.txt --key key.pem
        #    - cat decrypted.txt
            - string=$(encrypt_string "testing 123" --key pub.pem)
            - echo $string
            - decrypt_string --key key.pem "$string"
            - encrypt_file --output encrypted2.txt test2.txt --key pub.pem
            - cat encrypted2.txt
            - decrypt_file encrypted2.txt --output decrypted2.txt --key key.pem
            - cat decrypted2.txt
          onSuccess:
      #      - send_notification slack
            - echo "Job well done!"
          onFailure:
         #   - send_notification slack
            - echo "uh oh, something went wrong"
          onComplete: #always
         #   - send_notification slack
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
      - name: second_step
        type: Bash
        configuration:
          priority: 50
          affinityGroup: group2
          inputResources:
      #      - name: gitRepoResource2
            - name: imageResource
          inputSteps:
            - name: main_step
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
      - name: after_resource2
        type: Bash
        configuration:
          priority: 50
          affinityGroup: group2
  #        affinityGroup: test_group
     #   requires:
     #     resources:
     #       - gitRepoResource
          inputResources:
            - name: imageResource
          inputSteps:
            - name: main_step
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "testing" > test.txt
            - cache_files test.txt my_file
            - ls -alR $STEP_WORKSPACE_DIR
            - restore_cache_files my_file cachefile.txt
            - ls
            - echo "executing task command 1"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
            
      - name: step_1
        type: Bash
        configuration:
          priority: 100
          nodePool: u18
          inputSteps:
            - name: main_step
            - name: after_resource2
            - name: second_step
        execution:
          onStart:
            - return 1
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_2
        type: Bash
        configuration:
          priority: 10
          chronological: true
          nodePool: u18
          inputSteps:
            - name: step_1
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_3
        type: Bash
        configuration:
          priority: 500
          nodePool: u18
          inputSteps:
            - name: step_2
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_4
        type: Bash
        configuration:
          nodePool: u18
          inputSteps:
            - name: step_3
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_5
        type: Bash
        configuration:
          nodePool: u18
          inputSteps:
            - name: step_4
          integrations:
            - name: test
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - printenv
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_6
        type: Bash
        configuration:
          priority: 10000
          nodePool: u18
          inputSteps:
            - name: step_5
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_7
        type: Bash
        configuration:
          nodePool: u18
          inputSteps:
            - name: step_6
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_8
        type: Bash
        configuration:
          nodePool: u18
          inputSteps:
            - name: step_7
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_9
        type: Bash
        configuration:
     #     runtime:            
     #       type: image
     #       image:
     #         auto:
     #           language: go
          #    custom: 
          #      name: drydock/u16node
          #      tag:  master
          #      autoPull: false
          nodePool: u18
          inputSteps:
            - name: step_7
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_CreateReleaseBundle
        type: CreateReleaseBundle
        configuration:
          releaseBundleName: test
          releaseBundleVersion: one
          nodePool: u18
          inputResources:
            - name: my_BuildInfo
          outputResources:
            - name: my_releaseBundle2
          inputSteps:
            - name: step_7
        execution:
          onStart:
            - echo "Prepping build environment"
      - name: step_DistributeReleaseBundle
        type: DistributeReleaseBundle
        configuration:
          runtime:            
            type: host
          integrations:
            - name: docker
          inputResources:
            - name: my_releaseBundle2
            - name: my_BuildInfo
            - name: my_DistributionRule
          inputSteps:
            - name: step_7
        execution:
          onStart:
            - echo "Prepping build environment"
    #  - name: step_DockerBuild
    #    type: DockerBuild
    #    configuration:
    #      runtime:            
    #        type: image
    #      integrations:
    #        - name: docker
        #  inputResources:
        #    - name: gitRepoResource
    #      dockerFileLocation: Dockerfile
    #      dockerFileName: Dockerfile
    #      dockerImageName: amurphy/test
    #      dockerImageTag: test
    #      inputSteps:
    #        - name: step_7
    #    execution:
    #      onStart:
    #        - echo "Prepping build environment"
    #  - name: step_DockerPush
    #    type: DockerPush
    #    configuration:
    #      targetRepository: test
    #      integrations:
    #        - name: artifactory
    #        - name: docker
    #      inputSteps:
    #        - name: step_DockerBuild
    #    execution:
    #      onStart:
    #        - echo "Prepping build environment"
    #  - name: step_GoBuild
    #    type: GoBuild
    #    configuration:
    #      inputSteps:
    #        - name: step_7
       #   inputResources:
       #     - name: gitRepoResource
    #      integrations:
    #        - name: artifactory
    #        - name: docker
    #      sourceLocation: location
    #      repository: repo
    #      outputLocation: out
    #      outputFile: file
    #    execution:
    #      onStart:
    #        - echo "Prepping build environment"
    #  - name: step_GoPublishBinary
    #    type: GoPublishBinary
    #    configuration:
    #      integrations:
    #        - name: artifactory
    #        - name: docker
    #      inputResources:
    #        - name: my_BuildInfo
    #      targetRepository: test
    #      inputSteps:
    #        - name: step_7
    #    execution:
    #      onStart:
    #        - echo "Prepping build environment"
    #  - name: step_GoPublishModule
    #    type: GoPublishModule
    #    configuration:
    #      integrations:
    #        - name: artifactory
      #    inputResources:
      #      - name: gitRepoResource
    #      version: one
    #      targetRepository: test
    #      sourceLocation: location
    #      nodePool: u18
    #      inputSteps:
    #        - name: step_7
    #    execution:
    #      onStart:
    #        - echo "Prepping build environment"
    #  - name: step_GradleBuild
    #    type: GradleBuild
    #    configuration:
    #      integrations:
    #        - name: artifactory
    #        - name: docker
      #    inputResources:
      #      - name: gitRepoResource
    #      sourceLocation: location
    #      gradleCommand: gradle
    #      configFileLocation: .
    #      configFileName: config
    #      inputSteps:
    #        - name: step_7
    #    execution:
    #      onStart:
    #        - echo "Prepping build environment"
    #  - name: step_MvnBuild
    #    type: MvnBuild
    #    configuration:
    #      integrations:
    #        - name: artifactory
      #    inputResources:
      #      - name: gitRepoResource
    #      sourceLocation: location
    #      mvnCommand: mvn
    #      configFileLocation: .
    #      configFileName: config
    #      nodePool: u18
    #      inputSteps:
    #        - name: step_7
    #    execution:
    #      onStart:
    #        - echo "Prepping build environment"
    #  - name: step_NpmBuild
    #    type: NpmBuild
    #    configuration:
    #      integrations:
    #        - name: artifactory
      #    inputResources:
      #      - name: gitRepoResource
    #      sourceLocation: location
    #      repositoryName: test
    #      nodePool: u18
    #      inputSteps:
    #        - name: step_7
    #    execution:
    #      onStart:
    #        - echo "Prepping build environment"
    #  - name: step_NpmPublish
    #    type: NpmPublish
    #    configuration:
    #      integrations:
    #        - name: artifactory
    #      repositoryName: test
      #    inputResources:
      #      - name: gitRepoResource
    #      nodePool: u18
    #      inputSteps:
    #        - name: step_7
    #    execution:
    #      onStart:
    #        - echo "Prepping build environment"
      - name: step_PromoteBuild
        type: PromoteBuild
        configuration:
          targetRepository: test
          inputResources:
            - name: my_BuildInfo
          outputResources:
            - name: my_BuildInfo2
          nodePool: u18
          inputSteps:
            - name: step_7
        execution:
          onStart:
            - echo "Prepping build environment"
      - name: step_PublishBuildInfo
        type: PublishBuildInfo
        configuration:
          inputResources:
            - name: my_BuildInfo
          outputResources:
            - name: my_BuildInfo2
          nodePool: u18
          inputSteps:
            - name: step_7
        execution:
          onStart:
            - echo "Prepping build environment"
    #  - name: step_PushArtifactoryPackage
    #    type: PushArtifactoryPackage
    #    configuration:
    #      targetRepo: test
    #      integrations:
    #        - name: artifactory
    #      inputResources:
    #        - name: my_BuildInfo
    #      nodePool: u18
    #      inputSteps:
    #        - name: step_DockerBuild
    #    execution:
    #      onStart:
    #        - echo "Prepping build environment"
      - name: step_SignReleaseBundle
        type: SignReleaseBundle
        configuration:
          inputResources:
            - name: my_releaseBundle2
          outputResources:
            - name: my_signed_releaseBundle
          nodePool: u18
          inputSteps:
            - name: step_7
        execution:
          onStart:
            - echo "Prepping build environment"
      - name: step_XrayScan
        type: XrayScan
        configuration:
          inputResources:
            - name: my_BuildInfo
          nodePool: u18
          inputSteps:
            - name: step_7
        execution:
          onStart:
            - echo "Prepping build environment"
            
  - name: test_pipeline_release2
    steps:
      - name: my_xray
        type: XrayScan
        configuration:
     #     integrations:
     #       - name: slack
    #        - name: docker
          inputResources:
            - name: my_BuildInfo
  #          - name: my_BuildInfo2
    #        - name: my_Aql
          #  - name: my_Aql2
       #     - name: gitRepoResource
      #      - name: gitRepoResource
     #     outputResources:
     #       - name: my_BuildInfo2
    #        - name: gitRepoResource
  #    - name: my_releaseCreate
  #      type: CreateReleaseBundle
  #      configuration:
  #        releaseBundleName: name
  #        releaseBundleVersion: version
      #    integrations:
      #      - name: slack
      #      - name: docker
  #        inputResources:
  #          - name: my_BuildInfo
  #          - name: my_BuildInfo2
          #  - name: my_Aql
          #  - name: my_Aql2
       #     - name: gitRepoResource
      #      - name: gitRepoResource
  #        outputResources:
  #          - name: my_releaseBundle2
       #     - name: gitRepoResource
            
  - name: test_pipeline_2
    #configuration:
    #  environmentVariables:   
    #    readOnly:
    #      ENV1: value-1
    #      ENV2: value-2
    #  runtime:            
    #    type: host
    steps:
      - name: pre_pre_second_pipeline
        type: Bash
        configuration:
          priority: 9999
          outputResources:
            - name: imageResource
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: pre_second_pipeline
        type: Bash
        configuration:
          priority: 9999
          affinityGroup: three
          inputResources:
            - name: imageResource
    #        - name: gitRepoResource
      #  requires:
      #    resources:
      #      - gitRepoResource2
       # triggeredBy:
       #   resources:
       #     - gitRepoResource
       #     - imageResource
       #   steps:
       #     - main_step
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
      - name: second_pipeline
        type: Bash
        configuration:
      #  requires:
      #    resources:
      #      - gitRepoResource2
      #    inputResources:
      #      - name: gitRepoResource
       #     - name: imageResource
          inputSteps:
            - name: pre_second_pipeline
            - name: after_resource
        #    - main_step
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "$step_triggered_by_resource_name"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
      - name: post_second_pipeline
        type: Bash
        configuration:
          inputSteps:
            - name: second_pipeline
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "$step_triggered_by_resource_name"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
      - name: after_resource
        type: Bash
        configuration:
          affinityGroup: three
     #   requires:
     #     resources:
     #       - gitRepoResource
          inputResources:
            - name: imageResource
       #   steps:
       #     - second_pipeline
        execution:
          onExecute:
            - echo "testing" > test.txt
            - add_cache_files test.txt my_file
            - ls -alR $STEP_WORKSPACE_DIR
            - restore_cache_files my_file cachefile.txt
            - ls
            - echo "executing task command 1"
            - echo "executing task command 2"

  - name: test_pipeline_3
    steps:
      - name: pre_second_pipeline
        type: Bash
        configuration:
          priority: 10
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: third_pipeline
        type: Bash
        configuration:
          inputResources:
            - name: imageResource
          inputSteps:
            - name: pre_second_pipeline
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
#          onCancel:
#            - echo "Someone cancelled the job"
      - name: post_third_pipeline
        type: Bash
        configuration:
          inputSteps:
              - name: third_pipeline
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
