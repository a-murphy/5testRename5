resources:
 # - name: propertyBag
 #   type: PropertyBag
 #   configuration:
 #     property1: one
 #     property2: 2
 #     property3: III
 #     'property5': 'test space one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty'
 #     property6: ""
  - name: goRepo2
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/go_app
  - name: gitRepoResource32
    type: GitRepo
    configuration:
 #     interval: "0 0 * * *"
      gitProvider: aidan_github
      path: a-murphy/5testRename5
      buildOn:
        pullRequestClose: false
        releaseCreate: true
        tagCreate: true
      branches:
        include: {{gitBranch}}
        exclude: "{{ gitBranch }}"
      tags:
        include: "{{ gitBranch != 'windows2' ? 'testone' : 'testtwo' }}"
  - name: gitRepoResource34
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/sample_node
  - name: nodeRepoResource5
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/sample_node
      branches:
        include: master
  - name: gitRepoResource35
    type: GitRepo
    configuration:
      gitProvider: aidan_github
      path: a-murphy/5testRename5
      branches:
        include: {{gitBranch}}
  - name: buildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory:    artifactory
      buildName:  initial
      buildNumber: 1
  - name: dockerBuildBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory:    artifactory
      buildName:  initial
      buildNumber: 1
  - name: mavenBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory:    artifactory
      buildName:  initial
      buildNumber: 1
  - name: promotedBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory:    artifactory
      buildName:  initial
      buildNumber: 1
  - name: helmBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory:    artifactory
      buildName:  initial
      buildNumber: 1
#  - name: releaseBundle
#    type: ReleaseBundle
#    configuration:
#      sourceDistribution:    distribution
#      name: myRelease
#      version: ${run_number}
  - name: fileSpec2
    type: FileSpec
    configuration:
      sourceArtifactory: artifactory
      aql: 'items.find({"name": {"$match": "test.*"}})'
#  - name: remoteFile
#    type: RemoteFile
#    configuration:
#      source: artifactory
        
 # - name: helmChart
 #   type: HelmChart
 #   configuration:
 #     sourceArtifactory: artifactory
 #     repository: example-repo-local/test/
 #     chart: my chart
 #     version: v1.1.1
  - name: image2
    type: Image
    configuration:
      registry: artifactory
      sourceRepository: test-docker
      imageName: 54.187.73.59:8082/test-docker/image/test
      imageTag: tag
      autoPull: true
  - name: outhook
    type: OutgoingWebhook
    configuration:
      webhookName: outgoing
  - name: inhook
    type: IncomingWebhook
    configuration:
      webhookName: incoming
pipelines:
  - name: webhook_pipeline
    steps:
      - name: sendHook
        type: Bash
        configuration:
          outputResources:
            - name: outhook
            - name: inhook
      #    integrations:
      #      - name: email
      #    environmentVariables:
      #      outhook_payload_file: ${step_tmp_dir}/outhook_payload_file
        execution:
          onExecute:
            - export imageName="testname"
            - export imageTag="testtag"
      #      - send_notification email --recipients build@shippable.com
            - add_pipeline_variables test=true
            - write_output outhook test_1=valid
            - write_output outhook 2test=invalid
            - write_output outhook test-three=invalid
            - write_output outhook test4= invalid
            - write_output outhook "test 5='invalid test'"
            - write_output outhook _test6="valid_test"
            - write_output outhook t=valid
          onFailure:
            - echo "failed"
          onSuccess:
            - echo "{\"imageName\":\"$imageName\", \"imageTag\":\"$imageTag\"}" > myFile.txt
            - >-
              set_payload outhook myFile.txt --file myFile.txt
            - >-
              set_payload inhook "{\"test\":\"$run_number\", \"test2\":\"$step_id - test 123 - $step_url\"}"
            - cat "$(find_resource_variable "$1" resourcePath)/payload.env"
    #  - name: jenkins
    #    type: Jenkins
    #    configuration:
    #      inputSteps:
    #        - name: sendHook
    #      integrations:
    #        - name: newJenkins
    #      jenkinsJobName: jenkinsJob
    #      buildParameters:
    #        env1: ${res_buildInfo_buildName}
    #        env2: ${step_url}
    #        env3: "Test ${int_newJenkins_url} ${run_number}"
    #        runNumber: ${run_number}
    #        stepId: ${step_id}
    #  - name: jenkins2
    #    type: Jenkins
    #    configuration:
    #      inputSteps:
    #        - name: sendHook
    #      integrations:
    #        - name: newJenkins
    #      jenkinsJobName: pipelineJob
    #      buildParameters:
    #        runNumber: ${run_number}
    #        stepId: ${step_id}
    #  - name: jenkinsBranch1
    #    type: Jenkins
    #    configuration:
    #      inputSteps:
    #        - name: sendHook
    #      inputResources:
    #        - name: buildInfo
    #      integrations:
    #        - name: newJenkins
    #      jenkinsJobName: branchesJob
    #      jenkinsBranchName: master
    #      buildParameters:
    #        env1: ${res_buildInfo_buildName}
    #        env2: ${step_url}
    #        env3: "Test ${int_newJenkins_url} ${run_number}"
    #        runNumber: ${run_number}
    #        stepId: ${step_id}
      - name: docker_build
        type: DockerBuild
        configuration:
          dockerFileLocation: .
          dockerFileName: Dockerfile
          dockerImageName: 54.187.73.59:8082/test-docker/image/test #${versionTag}
          dockerImageTag: tag #${versionTag}
          #dockerOptions: "test${versionTag} --test ${testNumber}"
          environmentVariables:
            versionTag: testTag
            testNumber: 5
            testBoolean: "false"
          inputSteps:
            - name: sendHook
          inputResources:
         #   - name: fileSpec
            - name: gitRepoResource35
      - name: docker_promote
        type: PromoteBuild
        configuration:
          targetRepository: promoteRepository
          inputResources:
            - name: dockerBuildBuildInfo
          outputResources:
            - name: promotedBuildInfo
      - name: docker_push
        type: DockerPush
        configuration:
          targetRepository: test-docker
          autoPublishBuildInfo: true
          forceXrayScan: true
          failOnScan: false
          environmentVariables:
            versionTag: testTag
            testNumber: 5
            testBoolean: "false"
          inputSteps:
            - name: docker_build
          outputResources:
            - name: dockerBuildBuildInfo
      #      - name: outputBuildInfo
          integrations:
            - name: artifactory
   #   - name: helmPublish
   #     type: HelmPublish
   #     configuration:
   #       chartPath: "my chart"
   #       flags: --debug
   #       autoPublishBuildInfo: true
   #       forceXrayScan: true
   #       inputResources:
   #         - name: gitRepoResource35
   #         - name: promotedBuildInfo
   #       outputResources:
   #         - name: helmChart
   #         - name: helmBuildInfo
   #   - name: maven2
   #     type: MvnBuild
   #     configuration:
   #       sourceLocation: artifactory-maven-plugin-example
   #       configFileLocation: .
   #       configFileName: config
   #       mvnCommand: "install --debug"
   #       autoPublishBuildInfo: true
   #      # forceXrayScan: true
   #      # failOnScan: false
   #       inputResources:
   #         - name: maven_example_repo
   #       integrations:
   #         - name: artifactory
   #       outputResources:
   #         - name: mavenBuildInfo
   #     execution:
   #       onStart:
   #         - update-ca-certificates -f
   #   - name: xray
   #     type: XrayScan
   #     configuration:
   #       failOnScan: false
   #       inputResources:
   #         - name: mavenBuildInfo
   #     execution:
   #       onStart:
   #         - update-ca-certificates -f
   #   - name: createReleaseBundle
   #     type: CreateReleaseBundle
   #     configuration:
   #       dryRun: false
   #       releaseBundleName: myReleaseBundle
   #       releaseBundleVersion: ${run_number}
   #       inputResources:
   #         - name: helmBuildInfo
   #         - name: mavenBuildInfo
   #         - name: promotedBuildInfo
   #       outputResources:
   #         - name: releaseBundle
 
  - name: aidan_test_pipeline_windows
   # configuration:
   #   nodePool: win_2019
    steps:
      - name: in_trigger_step
        type: PowerShell
        configuration:    
   #       nodePool: windows
          affinityGroup: groupone
          runtime:            
            type: image
            image:
              custom:
                name: 54.187.73.59:8082/test-docker/image/test
                tag: tag
                registry: artifactory
                sourceRepository: test-docker
    #      inputResources:
    #        - name: gitRepoResource
    #        - name: fileSpec
        execution:
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
            - pushd $res_gitRepoResource_resourcePath
            - npm install
            - .\node_modules\.bin\mocha --recursive "tests/**/*.spec.js" -R mocha-junit-reporter --reporter-options mochaFile=testresults/testresults.xml
            - .\node_modules\.bin\istanbul --include-all-sources cover -root "routes" node_modules/mocha/bin/_mocha -- -R spec-xunit-file --recursive "tests/**/*.spec.js"
            - .\node_modules\.bin\istanbul report cobertura --dir codecoverage
            - save_tests testresults\*.xml

      - name: main_step
        type: PowerShell
        configuration:
    #      nodePool: windows
          environmentVariables:
            versionTag: testTag
            testNumber: 5
            testBoolean: "false"
     #     affinityGroup: groupone
          inputSteps:
            - name: in_trigger_step
          inputResources:
            - name: image2
        #    - name: propertyBag
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - 10.18.0
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo $test
            - add_pipeline_variables test=${run_number}
     #       - echo $res_propertyBag_property1
     #       - echo $res_propertyBag_property2
     #       - $property1
     #       - $property2
     #       - $property3
     #       - $env:property1
     #       - $env:property2
     #       - $env:property3
     #       - $global:property1
     #       - $script:property2
            - 'echo "step_node_name: $step_node_name"'
            - 'echo "step_node_id: $step_node_id"'
            - 'echo "step_node_pool_name: $step_node_pool_name"'
            
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
            
      - name: goPublishModule
        type: GoPublishModule
        configuration:
          forceXrayScan: false
          autoPublishBuildInfo: false
          targetRepository: go-test
          sourceLocation: .
          version: "v0.0.1"
          self: true
          deps: ALL
      #    outputResources:
      #      - name: outputBuildInfo
          inputResources:
            - name: goRepo2
          inputSteps:
            - name: main_step
          integrations:
            - name: artifactory
   #   - name: helmPublish
   #     type: HelmPublish
   #     configuration:
   #       chartPath: "my chart"
   #       flags: --debug
   #       inputResources:
   #         - name: gitRepoResource
   #       outputResources:
   #         - name: helmChart
   #         - name: helmBuildInfo
  - name: aidan_test_pipeline_bash
    steps:
      - name: bash_step
        type: Bash
        configuration:
          runtime:            
            type: image
            image:
              custom:
                name: 192.168.50.42:8082/image/test
                tag: tag
                registry: artifactory
                sourceRepository: test-docker
          inputResources:
            - name: gitRepoResource32
      #      - name: propertyBag
        execution:
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
        #    - echo $res_propertyBag_property1
        #    - echo $res_propertyBag_property2
        #    - echo $property1 $property2 $property3
        #    - echo $property4
            - echo "$res_gitRepoResource32_branches"
            - echo "$res_gitRepoResource32_branchName"
            - echo "$res_gitRepoResource32_branches_include"
          #  - pushd $res_gitRepoResource32_resourcePath
          #  - echo "hello frog" > test.xml
            - sleep 300
          #  - save_tests $res_gitRepoResource32_resourcePath/test.xml
      - name: bash_step2
        type: Bash
        configuration:
          affinityGroup: affinity_group2
          runtime:            
            type: image
          inputResources:
            - name: gitRepoResource32
          outputResources:
            - name: buildInfo
       #     - name: propertyBag
        execution:
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
            - write_output buildInfo buildName="myName" buildNumber=100
     #       - pushd $res_gitRepoResource32_resourcePath
     #       - echo "hello frog" > test.xml
     #       - save_tests $res_gitRepoResource32_resourcePath/test.xml
     
     
      - name: bash_step_3
        type: Bash
        configuration:
          affinityGroup: affinity_group2
          inputSteps:
            - name: bash_step2
        execution:
          onExecute:
            - echo "executing task command 1"
      - name: bash_step_4
        type: Bash
        configuration:
          inputSteps:
            - name: bash_step_3
          affinityGroup: affinity_group2
          inputResources:
            - name: gitRepoResource32
        execution:
          onExecute:
            - echo "executing task command 1"
      - name: bash_step_5
        type: Bash
        configuration:
          affinityGroup: affinity_group2
          inputSteps:
            - name: bash_step_4
        execution:
          onExecute:
            - echo "executing task command 1"
      - name: bash_step_6
        type: Bash
        configuration:
          affinityGroup: affinity_group2
          inputSteps:
            - name: bash_step_5
        execution:
          onExecute:
            - echo "executing task command 1"
      - name: bash_step_7
        type: Bash
        configuration:
          inputSteps:
            - name: bash_step_6
          affinityGroup: affinity_group2
     #     inputResources:
     #       - name: remoteFile
        execution:
          onExecute:
            - echo "executing task command 1"
      - name: bash_step_8
        type: Bash
        configuration:
          affinityGroup: affinity_group2
          inputSteps:
            - name: bash_step_7
     #     integrations:
     #       - name: nointegration
        execution:
          onExecute:
            - echo "executing task command 1"
      - name: bash_step_22
        type: Bash
        configuration:
          affinityGroup: affinity_group2
          inputSteps:
            - name: bash_step_8
        execution:
          onExecute:
            - echo "executing task command 1"
      - name: bash_step_25
        type: Bash
        configuration:
          inputSteps:
            - name: bash_step_22
          affinityGroup: affinity_group2
          inputResources:
            - name: gitRepoResource32
        execution:
          onExecute:
            - echo "executing task command 1"
   #   - name: bash_step_11
   #     type: Bash
   #     configuration:
   #       affinityGroup: affinity_group2
   #       inputSteps:
   #         - name: bash_step_10
   #     execution:
   #       onExecute:
   #         - echo "executing task command 1"
     
#  - name: test_npm
#    steps:      
#      - name: npm_build
#        type: NpmBuild
#        configuration:
#          repositoryName: example-repo-local
#          sourceLocation: .
#          inputResources:
#            - name: gitRepoResource35
#          integrations:
#            - name: artifactory
#        execution:
#          onSuccess:
#            - send_notification Demo_slack

  - name: aidan_test_pipeline_bash2
    steps:
      - name: bash_step_pipeline2
        type: Bash
        configuration:
          priority: 10
          runtime:            
            type: image
          inputResources:
            - name: buildInfo
            - name: fileSpec2
            - name: gitRepoResource32
        execution:
          onExecute:
            - echo "$res_buildInfo_buildName"
            - echo "$res_buildInfo_buildNumber"

