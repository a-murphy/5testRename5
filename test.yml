resources:      
         
  - name: gitNodeRepoResource
    type: GitRepo
    configuration:
      gitProvider: github
      path: a-murphy/sample_node

  - name: gitRepoResource5
    type: GitRepo
    configuration:
      gitProvider: github
      path: a-murphy/5testRename5
     # branches:
     #   only: test[
 #     buildOn:
     #    commit: false
  #       pullRequestCreate: true
  #       pullRequestClose: false
  #       releaseCreate: true
  #       tagCreate: true
 
      
  - name: imageResource
    type: Image
    configuration:
      registry: docker
      imageName: amurphy/test
      imageTag: master.105
      autoPull: false

#  - name: gitRepoResource2
#    type: GitRepo
#    configuration:
#      gitProvider: github
#      path: a-murphy/5testRename5
#      buildOn:
#         pullRequestCreate: true
#         pullRequestClose: true
#         releaseCreate: true
#         tagCreate: true
       
pipelines:
  - name: test_pipeline_1
    configuration:
      environmentVariables:   
       readOnly:
          ENV1: value-1
          ENV2: value-2
      runtime:            
        type: image
        image:
          auto:
            language: none
    steps:
      - name: in_trigger_step
        type: Bash
        configuration:
          priority: 10
          affinityGroup: test_group 
          timeoutSeconds: 180
          integrations:
            - name: docker
          environmentVariables:
            ENV1: value1
            ENV2: value2
          runtime:            
            type: host         
      #      type: image
      #      image:
      #        auto:
      #          language: none
       #       custom: 
       #         name: drydock/u18java
       #         tag:  master
       #         autoPull: false
          #    options: test
        execution:
          onSuccess:
            - echo "test"
          onExecute:
            - sleep 10
            - ls

      - name: main_step
        type: Bash
        configuration:
          chronological: true
       #   affinityGroup: test_group
          environmentVariables:
            ENV3: value3
            ENV4: value4
          runtime:            
            type: image
            image:
              auto:
                language: nodejs
          inputResources:
            - name: gitRepoResource5
          inputSteps:
            - name: in_trigger_step
        execution:
          onStart:
            - echo $CURRENT_SCRIPT_SECTION
            - echo "$ENV1 $ENV2 $ENV3 $ENV4"
          onExecute:
            - echo $CURRENT_SCRIPT_SECTION
            - echo "testing1234" > testing.txt
         #   - write_output gitRepoResource2 key=value123
         #   - write_output webhook key=value123 key2=value456 key3="testing 123" key4='testing "23' key5=testing\' key6='testing$test'
   
            - add_run_variables testRunVariable="testing" testingAgain=2 testThree=three
         #   - ls -al $PIPELINE_WORKSPACE_DIR
          #  - switch_env c --jdk openjdk11 4
          onSuccess:
            - echo "Job well done!"
            - echo $CURRENT_SCRIPT_SECTION
            - "1"
            - echo "test"
         #   - compare_git --resource gitRepoResource
        #    - update_commit_status bitbucketServerRepoResource --message "$CURRENT_SCRIPT_SECTION" --context "$CURRENT_SCRIPT_SECTION"
          onFailure:
            - echo $CURRENT_SCRIPT_SECTION
       #     - update_commit_status bitbucketServerRepoResource --message "$CURRENT_SCRIPT_SECTION" --context "$CURRENT_SCRIPT_SECTION"
            - echo "uh oh, something went wrong"
       #     - update_commit_status bitbucketServerRepoResource --status failure
          onComplete: #always
            - echo $CURRENT_SCRIPT_SECTION
        #    - update_commit_status bitbucketServerRepoResource --message "$CURRENT_SCRIPT_SECTION" --context "$CURRENT_SCRIPT_SECTION"
            - echo "Cleaning up some stuff"
          onCancel:
            - echo $CURRENT_SCRIPT_SECTION
       #     - update_commit_status bitbucketServerRepoResource --message "$CURRENT_SCRIPT_SECTION" --context "$CURRENT_SCRIPT_SECTION"
            - echo "Someone cancelled the job"

        #  - stateOne
      - name: other_step
        type: Bash
        configuration:
          priority: 50
  #        affinityGroup: test_group 
          runtime:            
            type: host
          integrations:
            - name: github
          inputSteps:
      #    resources:
      #      - sample_java_file_test
            - name: main_step
        execution:
       #   onStart:
       #     - send_notification slack
      #      - echo "Prepping build environment"
      #      - echo "$testRunVariable"
      #      - echo "$testingAgain"
      #      - echo "$testThree"
          onExecute:
          #  - send_notification slack
            - echo "executing task command 1"
            - echo "executing task command 2"
            - echo "$testRunVariable"
            - echo "$testingAgain"
            - echo "$testThree"
            - add_run_variables testRunVariable="testingAgain"
            - yes "testing 1234 " | head -c 100000 > test.txt
            - echo "testing 1234 " > test2.txt
            - openssl genrsa -out key.pem 2048
            - openssl rsa -in key.pem -text -noout
            - openssl rsa -in key.pem -pubout -out pub.pem 
            - openssl rsa -in pub.pem -pubin -text -noout 
            - encrypt_file --output encrypted.txt test.txt --key pub.pem
        #    - cat encrypted.txt
            - decrypt_file encrypted.txt --output decrypted.txt --key key.pem
        #    - cat decrypted.txt
            - string=$(encrypt_string "testing 123" --key pub.pem)
            - echo $string
            - decrypt_string --key key.pem "$string"
            - encrypt_file --output encrypted2.txt test2.txt --key pub.pem
            - cat encrypted2.txt
            - decrypt_file encrypted2.txt --output decrypted2.txt --key key.pem
            - cat decrypted2.txt
          onSuccess:
      #      - send_notification slack
            - echo "Job well done!"
          onFailure:
         #   - send_notification slack
            - echo "uh oh, something went wrong"
          onComplete: #always
         #   - send_notification slack
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
      - name: second_step
        type: Bash
        configuration:
          priority: 50
          affinityGroup: group2
          inputResources:
      #      - name: gitRepoResource2
            - name: imageResource
          inputSteps:
            - name: main_step
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
      - name: after_resource2
        type: Bash
        configuration:
          priority: 50
          affinityGroup: group2
  #        affinityGroup: test_group
     #   requires:
     #     resources:
     #       - gitRepoResource
          inputResources:
            - name: imageResource
          inputSteps:
            - name: main_step
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "testing" > test.txt
            - cache_files test.txt my_file
            - ls -alR $STEP_WORKSPACE_DIR
            - restore_cache_files my_file cachefile.txt
            - ls
            - echo "executing task command 1"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
            
      - name: step_1
        type: Bash
        configuration:
          priority: 100
          nodePool: u18
          inputSteps:
            - name: main_step
            - name: after_resource2
            - name: second_step
        execution:
          onStart:
            - return 1
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_2
        type: Bash
        configuration:
          priority: 10
          chronological: true
          nodePool: u18
          inputSteps:
            - name: step_1
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_3
        type: Bash
        configuration:
          priority: 500
          nodePool: u18
          inputSteps:
            - name: step_2
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_4
        type: Bash
        configuration:
          nodePool: u18
          inputSteps:
            - name: step_3
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_5
        type: Bash
        configuration:
          nodePool: u18
          inputSteps:
            - name: step_4
          integrations:
            - name: test
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - printenv
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_6
        type: Bash
        configuration:
          priority: 10000
          nodePool: u18
          inputSteps:
            - name: step_5
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_7
        type: Bash
        configuration:
          nodePool: u18
          inputSteps:
            - name: step_6
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_8
        type: Bash
        configuration:
          nodePool: u18
          inputSteps:
            - name: step_7
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_9
        type: Bash
        configuration:
     #     runtime:            
     #       type: image
     #       image:
     #         auto:
     #           language: go
          #    custom: 
          #      name: drydock/u16node
          #      tag:  master
          #      autoPull: false
          nodePool: u18
          inputSteps:
            - name: step_7
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: step_CreateReleaseBundle
        type: CreateReleaseBundle
        configuration:
          releaseBundleName: test
          releaseBundleVersion: one
          nodePool: u18
          inputResources:
            - name: my_BuildInfo
          outputResources:
            - name: my_releaseBundle2
          inputSteps:
            - name: step_7
        execution:
          onStart:
            - echo "Prepping build environment"

  - name: test_pipeline_2
    #configuration:
    #  environmentVariables:   
    #    readOnly:
    #      ENV1: value-1
    #      ENV2: value-2
    #  runtime:            
    #    type: host
    steps:
      - name: pre_pre_second_pipeline
        type: Bash
        configuration:
          priority: 9999
          outputResources:
            - name: imageResource
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: pre_second_pipeline
        type: Bash
        configuration:
          priority: 9999
          affinityGroup: three
          inputResources:
            - name: imageResource
    #        - name: gitRepoResource
      #  requires:
      #    resources:
      #      - gitRepoResource2
       # triggeredBy:
       #   resources:
       #     - gitRepoResource
       #     - imageResource
       #   steps:
       #     - main_step
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
      - name: second_pipeline
        type: Bash
        configuration:
      #  requires:
      #    resources:
      #      - gitRepoResource2
      #    inputResources:
      #      - name: gitRepoResource
       #     - name: imageResource
          inputSteps:
            - name: pre_second_pipeline
            - name: after_resource
        #    - main_step
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "$step_triggered_by_resource_name"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
      - name: post_second_pipeline
        type: Bash
        configuration:
          inputSteps:
            - name: second_pipeline
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "$step_triggered_by_resource_name"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
      - name: after_resource
        type: Bash
        configuration:
          affinityGroup: three
     #   requires:
     #     resources:
     #       - gitRepoResource
          inputResources:
            - name: imageResource
       #   steps:
       #     - second_pipeline
        execution:
          onExecute:
            - echo "testing" > test.txt
            - add_cache_files test.txt my_file
            - ls -alR $STEP_WORKSPACE_DIR
            - restore_cache_files my_file cachefile.txt
            - ls
            - echo "executing task command 1"
            - echo "executing task command 2"

  - name: test_pipeline_3
    steps:
      - name: pre_second_pipeline
        type: Bash
        configuration:
          priority: 10
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
      - name: third_pipeline
        type: Bash
        configuration:
          inputResources:
            - name: imageResource
          inputSteps:
            - name: pre_second_pipeline
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
#          onCancel:
#            - echo "Someone cancelled the job"
      - name: post_third_pipeline
        type: Bash
        configuration:
          inputSteps:
              - name: third_pipeline
        execution:
          onStart:
            - echo "Prepping build environment"
          onExecute:
            - echo "executing task command 1"
            - echo "executing task command 2"
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
